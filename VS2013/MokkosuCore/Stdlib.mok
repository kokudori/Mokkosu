#============================================================
#! @file    Stdlib.mok
#! @brief   Mokkosu 標準ライブラリ
#! @author  lambdataro, kielnow
#============================================================

__define "HIDE_TYPE";

import "mscorlib.dll";
import "System.dll";
import "System.Core.dll";
import "System.Drawing.dll";
import "System.Windows.Forms.dll";

using System;
using System.Collections;
using System.Reflection;

#------------------------------------------------------------
# システム関数
#------------------------------------------------------------

let println x = __prim "println" (x);
let print x = __prim "print" (x);
let error x = __prim "error" (x);
let undefined _ = error "undefined";
let ignore _ = ();

#------------------------------------------------------------
# 比較演算
#------------------------------------------------------------

let __operator_eqeq x y = __prim "eq" (x, y);
let __operator_ltgt x y = __prim "ne" (x, y);
let __operator_lt x y = __prim "lt" (x, y);
let __operator_gt x y = __prim "gt" (x, y);
let __operator_le x y = __prim "le" (x, y);
let __operator_ge x y = __prim "ge" (x, y);

let intequal x y = __prim "intequal" (x, y);

let max x y = if x > y -> x else y;
let min x y = if x < y -> x else y;

#------------------------------------------------------------
# 整数演算
#------------------------------------------------------------

let __operator_pls x y = __prim "add" (x, y);
let __operator_mns x y = __prim "sub" (x, y);
let __operator_ast x y = __prim "mul" (x, y);
let __operator_sls x y = __prim "div" (x, y);
let __operator_per x y = __prim "mod" (x, y);
let __operator_neg x = 0 - x;

fun __operator_astast x y =
  if y == 0 -> 1
  else x * x ** (y - 1);

let succ x = x + 1;
let pred x = x - 1;
let abs x = if x >= 0 -> x else ~-x;

#------------------------------------------------------------
# ビット演算
#------------------------------------------------------------

let band x y = __prim "band" (x, y);
let bor x y = __prim "bor" (x, y);
let bxor x y = __prim "bxor" (x, y);
let bnot x = __prim "bnot" (x);
let bshr x y = __prim "bshr" (x, y);
let bshl x y = __prim "bshl" (x, y);
let bshrun x y = __prim "bshrun" (x, y);

#------------------------------------------------------------
# 浮動小数点数演算
#------------------------------------------------------------

let __operator_plsdot x y = __prim "fadd" (x, y);
let __operator_mnsdot x y = __prim "fsub" (x, y);
let __operator_astdot x y = __prim "fmul" (x, y);
let __operator_slsdot x y = __prim "fdiv" (x, y);

let __operator_negdot x = 0.0 -. x;

let fabs x = if x >= 0.0 -> x else ~-.x;

let pi = sget System.Math::PI;
let pi2 = pi *. 2.0;
let e = sget System.Math::E;

let sqrt x = call System.Math::Sqrt((x : Double));
let exp x = call System.Math::Exp((x : Double));
let log x = call System.Math::Log((x : Double));
let log10 x = call System.Math::Log10((x : Double));
let logn x y = call System.Math::Log((x : Double), (y : Double));
let pow x y = call System.Math::Pow((x : Double), (y : Double));

let sin x = call System.Math::Sin((x : Double));
let cos x = call System.Math::Cos((x : Double));
let tan x = call System.Math::Tan((x : Double));

let asin x = call System.Math::Asin((x : Double));
let acos x = call System.Math::Acos((x : Double));
let atan x = call System.Math::Atan((x : Double));
let atan2 x y = call System.Math::Atan2((x : Double), (y : Double));

let sinh x = call System.Math::Sinh((x : Double));
let cosh x = call System.Math::Cosh((x : Double));
let tanh x = call System.Math::Tanh((x : Double));

let ceiling x = call System.Math::Ceiling((x : Double));
let truncate x = call System.Math::Truncate((x : Double));
let round x = call System.Math::Round((x : Double));
let floor x = call System.Math::Floor((x : Double));

#------------------------------------------------------------
# 文字列演算
#------------------------------------------------------------

let __operator_hat x y = __prim "concat" (x, y);
let to_string x = __prim "tostring" (x);
let strlen (str : String) = str.get_Length();
let strnth (str : String) (idx : Int) = str.get_Chars(idx);

#------------------------------------------------------------
# 論理演算
#------------------------------------------------------------

let not = { true -> false; false -> true };
let xor (a : Bool) (b : Bool) = a <> b; 

#------------------------------------------------------------
# 変換
#------------------------------------------------------------

let parse_int (s : String) = call Int32::Parse(s);
let parse_double (s : String) = call Double::Parse(s);

let int_to_double (n : Int) = call Convert::ToDouble(n);
let double_to_int (d : Double) = call Convert::ToInt32(d);
let int_to_char (n : Int) = call Convert::ToChar(n);
let char_to_int (c : Char) = call Convert::ToInt32(c);

let int_to_single (n : Int) = call Convert::ToSingle(n);
let single_to_int (f : {Single}) = call Convert::ToInt32(f);
let double_to_single (n : Double) = call Convert::ToSingle(n);
let single_to_double (f : {Single}) = call Convert::ToDouble(f);

let int_to_object (n : Int) = cast<Int32, Object>(n);
let double_to_object (d : Double) = cast<Double, Object>(d);
let bool_to_object (b : Bool) = cast<Boolean, Object>(b);
let char_to_object (c : Char) = cast<Char, Object>(c);
let string_to_object (s : String) = cast<String, Object>(s);

let string_to_list str =
  let len = strlen str in
  fun loop acc n =
    if n < 0 -> acc
	else loop (strnth str n :: acc) (n - 1)
  in loop [] (len - 1);

#------------------------------------------------------------
# 関数
#------------------------------------------------------------

let __operator_ltbar f x = f x;
let __operator_bargt x f = f x;
let __operator_ltlt f g x = f (g x);
let __operator_gtgt f g x = g (f x);
let match x f = f x;
let id x = x;
let const x y = x;
let flip f y x = f x y;

#------------------------------------------------------------
# Tuple
#------------------------------------------------------------

let fst (x, _) = x;
let snd (_, x) = x;

let curry f a b = f (a, b);
let uncurry f (a, b) = f a b;

#------------------------------------------------------------
# リファレンスセル
#------------------------------------------------------------

let ref x = __prim "ref" (x);
let __operator_bang x = __prim "deref" (x);
let __operator_coleq x y = __prim "assign" (x, y);
let incr r = r := !r + 1;
let decr r = r := !r - 1;

#------------------------------------------------------------
# Maybe
#------------------------------------------------------------

type Maybe<T> = Nothing | Just(T);

let maybe x f = {
  ~Nothing -> x;
  ~Just(y) -> f y;
};

let map_maybe f = {
  ~Nothing -> Nothing;
  ~Just(x) -> Just(f x);
};

let is_just = {
  ~Just(_) -> true;
  ~Nothing -> false;
};

let is_nothing = {
  ~Just(_) -> false;
  ~Nothing -> true;
};

let from_just = {
  ~Just(x) -> x;
  ~Nothing -> error "from_just";
};

#------------------------------------------------------------
# Either
#------------------------------------------------------------

type Either<T, U> = Left(T) | Right(U);

let either f g = {
  ~Left(x) -> f x;
  ~Right(x) -> g x;
};

#------------------------------------------------------------
# リスト
#------------------------------------------------------------

let is_nil = { [] -> true; _ -> false };

let head = {
  [] -> error "head";
  x::_ -> x;
};

let tail = {
  [] -> error "tail";
  _::xs -> xs;
};

let reverse lis =
  fun loop acc lis =
    if is_nil lis -> acc
    else loop (head lis :: acc) (tail lis)
  in loop [] lis;

let __operator_dotdot x y =
  fun loop acc i =
    if i < x -> acc
	else loop (i :: acc) (i - 1)
  in loop [] y;

let __operator_plspls xs ys =
  fun loop acc lis =
    if is_nil lis -> acc
	else loop (head lis :: acc) (tail lis)
  in loop ys (reverse xs);

fun length = {
  [] -> 0;
  _ :: xs -> 1 + length xs;
};

let map f lis =
  fun loop acc lis =
    if is_nil lis -> reverse acc
	else loop (f (head lis) :: acc) (tail lis)
  in loop [] lis;
 
fun nth lis n =
  if n == 0 -> head lis
  else nth (tail lis) (n - 1);

fun foldl f seed = {
  [] -> seed;
  x :: xs -> foldl f (f seed x) xs;
};

fun foldr f seed = {
  [] -> seed;
  x :: xs -> f x (foldr f seed xs)
};

fun lookup key = {
  [] -> Nothing;
  (k,v)::_ ? key == k -> Just(v);
  _::xs -> lookup key xs;
};

let concat lis =
  fun loop acc lis =
    if is_nil lis -> acc
	else loop (acc ++ head lis) (tail lis)
  in loop [] lis;

let concat_map f lis = concat (map f lis);

let __for_bind lis f = concat_map f lis;
let __for_unit x = [x];
let __for_zero = [];

#------------------------------------------------------------
# 配列
#------------------------------------------------------------

let list_to_array lis =
  let alist = new ArrayList() in
  fun loop = {
    [] -> [];
	x :: xs -> do alist.Add((x : {Object})) |> ignore in loop xs; 
  } in
  do loop lis |> ignore in
  alist.ToArray();

let format (str : String) (args : [{Object}]) =
  call String::Format(str, list_to_array args);

#------------------------------------------------------------
# リフレクション
#------------------------------------------------------------

let get_type (str : String) = call Type::GetType(str);

let null = __prim "loadnull" ();

#------------------------------------------------------------
# メッセージ
#------------------------------------------------------------

let msgbox value =
  call System.Windows.Forms.MessageBox::Show(to_string value) |> ignore;

__undefine "HIDE_TYPE";
